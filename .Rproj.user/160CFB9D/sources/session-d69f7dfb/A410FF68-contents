---
title: "Bizzup Product Data 2025"
output: html_document
date: "2025-09-03"
params:
  target_margin: 0.30
  tolerance_band: 0.05
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)

req_pkgs <- c(
  "readr","readxl","dplyr","tidyr","stringr","lubridate",
  "janitor","purrr","openxlsx","data.table","tibble"
)
to_install <- setdiff(req_pkgs, rownames(installed.packages()))
if (length(to_install) > 0) install.packages(to_install, Ncpus = 2)
invisible(lapply(req_pkgs, library, character.only = TRUE))
options(stringsAsFactors = FALSE)

# ==== 파라미터 ====
target_margin  <- if (!is.null(params$target_margin))  params$target_margin  else 0.30
tolerance_band <- if (!is.null(params$tolerance_band)) params$tolerance_band else 0.05

# 가격 기반 이상치 필터 옵션 (메모 없이 가격만으로 탐지)
outlier_method        <- "mad+ratio"  # "none" / "mad" / "ratio" / "mad+ratio"
outlier_k_mad         <- 3            # robust Z < -k 이면 이상치
outlier_min_discount  <- 0.25         # 중앙값 대비 25%↓ 이면 이상치
outlier_min_lines     <- 5            # 기준치 계산 최소 라인 수(최근90일 RET/REST)

outlier_scope_segments <- c("RETAIL","RESTAURANT")
```

```{r Load data}
#Set working directory
setwd("C:/Users/mjk/OneDrive/Desktop/BIZZUP/Cut+Dry/DATA")

#Load data setS
Bizzup_product <- read_xls("Bizzup_Product List.xls")%>% janitor::clean_names()
ytd_raw <- read_csv("Bizzup_Year to Date Sales by Product.csv", skip = 3, show_col_types = FALSE)%>% janitor::clean_names()
pur_2020_2023_raw <- read_csv("Bizzup_Purchases by Product 2020-2023.csv", skip = 4)%>% janitor::clean_names()
pur_2024_raw <- read_csv("Bizzup_Purchases by Product 2024.csv", skip = 4)%>% janitor::clean_names()
pur_2025_raw <- read_csv("Bizzup_Purchases by Product 2025.csv", skip = 4)%>% janitor::clean_names()
sd_raw <- read_csv("Bizzup_Sales Detail_Last24M.csv", skip = 4)%>% janitor::clean_names()
og_raw <- read_csv("Bizzup_Customer Order Guide.csv")
cust_raw <- readr::read_csv("Bizzup_Customer Data_clean.csv", show_col_types = FALSE) %>% janitor::clean_names()

list(PL=nrow(Bizzup_product), YTD=nrow(ytd_raw), P20_23=nrow(pur_2020_2023_raw), P24=nrow(pur_2024_raw),
     P25=nrow(pur_2025_raw), SD=nrow(sd_raw), OG=nrow(og_raw))
```


```{r Helpers}
# Number/Date/Key standardize
parse_num <- function(x) suppressWarnings(readr::parse_number(as.character(x)))
parse_date_any2 <- function(x){
  y <- suppressWarnings(lubridate::parse_date_time(as.character(x),
       orders = c("ymd","mdy","dmy","Ymd HMS","mdy HMS","dmy HMS")))
  y <- as.Date(y)
  if (mean(is.na(y)) > 0.5) {
    xn <- suppressWarnings(as.numeric(as.character(x)))
    y2 <- suppressWarnings(as.Date(xn, origin = "1899-12-30"))
    if (sum(!is.na(y2)) > sum(!is.na(y))) y <- y2
  }
  y
}
norm_key <- function(x){
  x <- toupper(as.character(x))
  x <- stringr::str_replace_all(x, "[\\s\\-_/:]+", " ")
  stringr::str_squish(x)
}
map_segment <- function(cat){
  c2 <- toupper(cat)
  dplyr::case_when(
    c2 %in% c("A_BEEF","B_PORK","C_POULTRY","D_WAGYU","E_PACKAGE MEAT","E_PACKAGE_MEAT","F_ETC. MEAT","F_ETC._MEAT") ~ "Meat",
    c2 %in% c("G_DRY GROCERY","G_DRY_GROCERY","H_CHILLED GROCERY","H_CHILLED_GROCERY","I_FROZEN GROCERY","I_FROZEN_GROCERY") ~ "Grocery",
    c2 %in% c("J_PRODUCE","L_EGGS") ~ "Fresh",
    c2 %in% c("Q_LIQUOR","Q-LIQUOR") ~ "Alcohol Beverage",
    c2 %in% c("R_HOUSEWARE") ~ "Hardware",
    c2 %in% c("M_RESTAURANT DISH","M_RESTAURANT_DISH","SERVICE FEE","SERVICE_FEE") ~ "OTHER",
    TRUE ~ "OTHER"
  )
}
pick_one <- function(df, choices) {
  hit <- intersect(choices, names(df))
  if (length(hit)) hit[1] else NA_character_
}
# Purchases CSV 클리너(반복헤더/합계/오프닝 제거 + rate 숫자 보존)
clean_purchases_qb <- function(df, drop_opening_qty_nonzero = TRUE){
  df <- janitor::clean_names(df)
  need <- c("product_service_full_name","transaction_date","memo_description","quantity","rate")
  miss <- setdiff(need, names(df))
  if (length(miss) > 0) stop("Purchases missing cols: ", paste(miss, collapse=", "))

  df %>%
    dplyr::select(dplyr::any_of(c(
      "product_service_full_name","transaction_date","memo_description","quantity","rate"
    ))) %>%
    dplyr::mutate(
      ps   = tolower(trimws(product_service_full_name)),
      memo = tolower(trimws(memo_description)),
      qty  = parse_num(quantity),
      rate = parse_num(rate)
    ) %>%
    dplyr::filter(rowSums(!is.na(dplyr::across(everything()))) > 0) %>%
    dplyr::filter(
      !ps %in% c("product/service full name","product service full name",
                 "product/service","product service","distribution account",
                 "transaction date","customer full name","vendor","memo/description","quantity","rate"),
      !stringr::str_detect(ps, "^(total(\\s+for)?|subtotal|grand total)\\b")
    ) %>%
    { if (drop_opening_qty_nonzero)
        dplyr::filter(., !(stringr::str_detect(memo, "opening inventory and value") &
                           !is.na(qty) & qty != 0))
      else . } %>%
    dplyr::filter(stringr::str_detect(ps, ":")) %>%
    dplyr::transmute(
      product_service_full_name,
      transaction_date,
      quantity = qty,
      rate     = rate
    )
}
# 상태 규칙
classify_status <- function(last_sold_date, last_purchased_date, ref_date = Sys.Date()){
  if (!is.na(last_sold_date) && as.Date(last_sold_date) >= (ref_date - 180)) return("Active - Full")
  if (!is.na(last_purchased_date) && as.Date(last_purchased_date) >= (ref_date - 365)) return("Active - Semi")
  "Inactive"
}
# 제외 규칙
EXCLUDE_CATS <- c("CONSULTING SERVICE","K_BEAUTY AND COSMETICS","M_RESTAURANT DISH","SERVICE FEE")
has_banned_kw <- function(x) stringr::str_detect(dplyr::coalesce(x, ""), "안씀")
# 세그먼트 레벨 고정
SEG_LEVELS <- c("ALL BROOM","WHOLESALER","RETAIL","RESTAURANT")
```

```{r Product data}
# Data used: Bizzup_Product List.xls
# Used Columns (after cleaning): product_service_name, sales_description, sku,sales_price_rate, purchase_cost, quantity_on_hand

product_list <- Bizzup_product %>%
  dplyr::transmute(
    category      = toupper(stringr::str_extract(product_service_name, "^[^:>]+")),
    code          = tolower(stringr::str_replace(product_service_name, "^[^:>]+[:>]\\s*", "")),
    item_fullname = paste0(category, ":", code),
    description   = sales_description,
    vendor_sku    = sku,
    list_price    = parse_num(sales_price_rate),
    cost          = parse_num(purchase_cost),
    qty_on_hand   = parse_num(quantity_on_hand),
    segment       = map_segment(category),
    key_name      = norm_key(item_fullname)
  ) %>%
  dplyr::filter(!category %in% EXCLUDE_CATS) %>%
  dplyr::filter(!has_banned_kw(description)) %>%
  dplyr::filter(!stringr::str_detect(item_fullname, stringr::regex("\\(deleted\\)", ignore_case = TRUE)))
```



```{r YTD Sales}
# Data used: Bizzup_Year to Date Sales by Product.csv (상단 3줄 머리말)
# Used Columns (after cleaning): product_service_full_name, transaction_date, quantity, sales_price
ytd <- ytd_raw %>%
  dplyr::transmute(
    key_name = norm_key(product_service_full_name),
    txn_date = parse_date_any2(transaction_date),
    qty      = parse_num(quantity),
    price    = parse_num(sales_price),
    amount   = qty * price
  ) %>%
  dplyr::filter(!is.na(key_name)) %>%
  dplyr::summarise(
    ytd_qty    = sum(qty, na.rm = TRUE),
    ytd_amount = sum(amount, na.rm = TRUE),
    .by = key_name
  )
```


```{r Purchase data}
# Data used: Bizzup_Purchases by Product 2020-2023.csv, 2024.csv, 2025.csv (First 3 rows are headers - unnecessary)
# Used Columns (after cleaning): product_service_full_name, transaction_date
pur_df <- dplyr::bind_rows(pur_2020_2023_raw, pur_2024_raw, pur_2025_raw) %>%
  clean_purchases_qb()

last_purchase <- pur_df %>%
  dplyr::transmute(
    key_name = norm_key(product_service_full_name),
    p_date   = parse_date_any2(transaction_date)
  ) %>%
  dplyr::filter(!is.na(key_name), !is.na(p_date)) %>%
  dplyr::summarise(last_purchased_date = max(p_date, na.rm = TRUE), .by = key_name)

# 판매시점 원가용 구매단가 타임라인
pur_cost <- pur_df %>%
  dplyr::transmute(
    key_name  = norm_key(product_service_full_name),
    p_date    = parse_date_any2(transaction_date),
    unit_cost = parse_num(rate)
  ) %>%
  dplyr::filter(!is.na(key_name), !is.na(p_date), !is.na(unit_cost), unit_cost > 0) %>%
  dplyr::arrange(key_name, p_date) %>%
  dplyr::distinct(key_name, p_date, .keep_all = TRUE)
```


```{r Customer segment mapping}
# --- Customer Segment Map ---
# 후보 컬럼 자동 선택
cust_name_col <- pick_one(cust_raw, c("customer","customer_name","customer_full_name","customer_name_si","customer_raw"))
cust_seg_col  <- pick_one(cust_raw, c("segment","customer_segment","name_for_segment","name_for_segmen"))

cust_map <- cust_raw %>%
  dplyr::transmute(
    cust_key = norm_key(.data[[cust_name_col]]),
    seg_raw  = toupper(as.character(.data[[cust_seg_col]])),
    all.broom = toupper(as.character(.data[[cust_name_col]]))
  ) %>%
  dplyr::mutate(
    cust_segment_norm = dplyr::case_when(
      stringr::str_detect(all.broom, "ALL BROOM") ~ "ALL BROOM",
      stringr::str_detect(seg_raw, "WHOLESALE|WHOLESALER")  ~ "WHOLESALER",
      stringr::str_detect(seg_raw, "RETAIL")                ~ "RETAIL",
      TRUE                                                  ~ "RESTAURANT"
    )
  ) %>%
  dplyr::filter(!is.na(cust_key) & cust_key != "") %>%
  dplyr::summarise(cust_segment_norm = dplyr::first(cust_segment_norm), .by = cust_key)
```



```{r Sales Data}
need <- c("product_service_full_name","transaction_date","quantity","sales_price")
miss <- setdiff(need, names(sd_raw)); if (length(miss) > 0) stop("Sales detail missing cols: ", paste(miss, collapse=", "))

cust_col <- pick_one(sd_raw, c("customer_full_name","customer","customer_name"))

sd <- sd_raw %>%
  dplyr::transmute(
    key_name = norm_key(product_service_full_name),
    sd_date  = parse_date_any2(transaction_date),
    sd_qty   = parse_num(quantity),
    sd_price = parse_num(sales_price),
    sd_amt   = sd_qty * sd_price,
    cust_key = if (!is.na(cust_col)) norm_key(.data[[cust_col]]) else NA_character_
  ) %>%
  dplyr::filter(!is.na(key_name), !is.na(sd_date))

# 고객 세그먼트 라벨 부여(없으면 RESTAURANT로 통일)
sdx <- sd %>%
  dplyr::left_join(cust_map, by = "cust_key") %>%
  dplyr::mutate(segment_lbl = dplyr::coalesce(cust_segment_norm, "RESTAURANT"))

# === 가격 기반 이상치 제거: '세그먼트별' 기준(중앙값/MAD, 90일) ===
ref_today <- Sys.Date()
last_90   <- ref_today - 90
last_180  <- ref_today - 180
last_365  <- ref_today - 365

# 기준을 계산할 표본(세그먼트별로 따로)
sdx_recent_norm <- sdx %>%
  dplyr::filter(
    sd_date >= last_90,
    segment_lbl %in% outlier_scope_segments,
    is.finite(sd_price), sd_price > 0, sd_qty > 0
  )

price_base_seg <- sdx_recent_norm %>%
  dplyr::summarise(
    n_lines = dplyr::n(),
    med     = stats::median(sd_price, na.rm = TRUE),
    mad     = stats::mad(sd_price, constant = 1.4826, na.rm = TRUE),
    .by = c(key_name, segment_lbl)
  ) %>%
  dplyr::mutate(mad = dplyr::if_else(is.na(mad) | mad == 0, med * 0.05, mad))

sdx2 <- sdx %>%
  dplyr::left_join(price_base_seg, by = c("key_name","segment_lbl")) %>%
  dplyr::mutate(
    in_scope   = segment_lbl %in% outlier_scope_segments,
    can_filter = in_scope & !is.na(n_lines) & n_lines >= outlier_min_lines,
    rob_z      = (sd_price - med) / pmax(mad, 1e-6),
    is_low_mad   = outlier_method %in% c("mad","mad+ratio")   & !is.na(rob_z) & (rob_z < -outlier_k_mad),
    is_low_ratio = outlier_method %in% c("ratio","mad+ratio") & !is.na(med)   & (sd_price < med * (1 - outlier_min_discount)),
    is_outlier   = can_filter & (is_low_mad | is_low_ratio)
  )

# 이상치 제거 데이터(대상 세그먼트만 필터가 적용되고, ALL BROOM/WHOLESALER는 그대로 유지)
sdx2_clean <- if (outlier_method == "none") sdx2 else dplyr::filter(sdx2, !is_outlier)

# === 롤업(전체/리테일) ===
sales_rollups <- sd %>%
  dplyr::summarise(
    last_sold_date = suppressWarnings(max(sd_date[sd_qty > 0], na.rm = TRUE)),
    qty_180d = sum(sd_qty[sd_date >= last_180], na.rm = TRUE),
    qty_365d = sum(sd_qty[sd_date >= last_365], na.rm = TRUE),
    amt_90d  = sum(sd_amt[sd_date >= last_90],  na.rm = TRUE),
    qty_90d  = sum(sd_qty[sd_date >= last_90],  na.rm = TRUE),
    .by = key_name
  ) %>%
  dplyr::mutate(avg_price_90d = dplyr::if_else(qty_90d > 0, amt_90d/qty_90d, NA_real_)) %>%
  dplyr::select(key_name, last_sold_date, qty_180d, qty_365d, avg_price_90d)

# 리테일(= outlier_scope_segments) 기준 최근90일 평균가(이상치 제거 반영)
sales_rollups_retail <- sdx2_clean %>%
  dplyr::filter(segment_lbl %in% outlier_scope_segments) %>%
  dplyr::summarise(
    amt_90d_retail = sum(sd_amt[sd_date >= last_90],  na.rm = TRUE),
    qty_90d_retail = sum(sd_qty[sd_date >= last_90],  na.rm = TRUE),
    .by = key_name
  ) %>%
  dplyr::mutate(avg_price_90d_retail = dplyr::if_else(qty_90d_retail > 0, amt_90d_retail/qty_90d_retail, NA_real_)) %>%
  dplyr::select(key_name, avg_price_90d_retail)

```



```{r Master data}
master <- product_list %>%
  left_join(sales_rollups,        by = "key_name") %>%
  left_join(sales_rollups_retail, by = "key_name") %>%
  left_join(ytd,                  by = "key_name") %>%
  left_join(last_purchase,        by = "key_name") %>%
  mutate(
    last_sold_date      = as.Date(last_sold_date),
    last_purchased_date = as.Date(last_purchased_date),
    current_sales_price = coalesce(avg_price_90d_retail, avg_price_90d, list_price),
    status = purrr::pmap_chr(list(last_sold_date, last_purchased_date),
                             ~ classify_status(..1, ..2, ref_date = Sys.Date())),
    current_cost  = cost,
    margin_pct    = case_when(
      !is.na(current_sales_price) & current_sales_price > 0 & !is.na(current_cost) ~
        1 - (current_cost / current_sales_price),
      TRUE ~ NA_real_
    ),
    target_price  = if_else(!is.na(current_cost), current_cost/(1 - target_margin), NA_real_),

    # ✅ 재고 정규화 + 인벤토리 상태
    qty_on_hand   = if_else(is.na(qty_on_hand) | qty_on_hand < 1, 0, qty_on_hand),
    inventory_status = if_else(qty_on_hand > 0, "In Stock", "Out of Stock"),

    margin_status = case_when(
      is.na(margin_pct) ~ NA_character_,
      margin_pct < (target_margin - tolerance_band) ~ "Low",
      margin_pct > (target_margin + tolerance_band) ~ "High",
      TRUE ~ "Average"
    )
  ) %>%
  select(
    category, code, description, status, segment,
    current_cost, current_sales_price, margin_pct, target_price, margin_status,
    item_fullname, last_sold_date, last_purchased_date,
    qty_180d, qty_365d, ytd_qty, ytd_amount,
    qty_on_hand,            # ← 이미 정규화된 값
    inventory_status        # ← 새 컬럼
  ) %>%
  arrange(segment, category, desc(status), code)
```


```{r Summary data}
sum_status <- master %>% dplyr::count(status, name = "Items") %>% dplyr::rename(Status = status)

sum_seg <- master %>% dplyr::count(segment, status, name = "Items") %>%
  tidyr::pivot_wider(names_from = status, values_from = Items, values_fill = 0) %>%
  dplyr::mutate(Total = rowSums(dplyr::across(where(is.numeric)))) %>%
  dplyr::rename(Segment = segment) %>%
  { names(.) <- stringr::str_to_title(names(.)); . }

sum_cat <- master %>% dplyr::count(category, status, name = "Items") %>%
  tidyr::pivot_wider(names_from = status, values_from = Items, values_fill = 0) %>%
  dplyr::mutate(Total = rowSums(dplyr::across(where(is.numeric)))) %>%
  dplyr::rename(Category = category) %>%
  { names(.) <- stringr::str_to_title(names(.)); . }

seg_margin <- master %>%
  dplyr::summarise(
    Items = dplyr::n(),
    `Average Margin %` = mean(margin_pct, na.rm = TRUE),
    `Ytd Sales` = sum(tidyr::replace_na(ytd_amount, 0), na.rm = TRUE),
    `Sales-Weighted Margin % (YTD)` = dplyr::if_else(
      `Ytd Sales` > 0,
      sum(tidyr::replace_na(margin_pct, 0) * tidyr::replace_na(ytd_amount, 0), na.rm = TRUE) / `Ytd Sales`,
      NA_real_
    ),
    .by = segment
  ) %>% dplyr::rename(Segment = segment)

cat_margin <- master %>%
  dplyr::summarise(
    Items = dplyr::n(),
    `Average Margin %` = mean(margin_pct, na.rm = TRUE),
    `Ytd Sales` = sum(tidyr::replace_na(ytd_amount, 0), na.rm = TRUE),
    `Sales-Weighted Margin % (YTD)` = dplyr::if_else(
      `Ytd Sales` > 0,
      sum(tidyr::replace_na(margin_pct, 0) * tidyr::replace_na(ytd_amount, 0), na.rm = TRUE) / `Ytd Sales`,
      NA_real_
    ),
    .by = category
  ) %>% dplyr::rename(Category = category)

sum_margin_status <- master %>% dplyr::count(margin_status, name = "Items") %>% dplyr::rename(`Margin Status` = margin_status)

# === 세그먼트×카테고리 (판매시점 원가 + 이상치 제외) ===
# 롤링조인으로 판매시점 원가 붙이기
sdx2_dt <- as.data.table(
  sdx2_clean %>% dplyr::select(key_name, sd_date, sd_qty, sd_price, sd_amt, segment_lbl)
)
pur_dt  <- as.data.table(
  pur_cost %>% dplyr::select(key_name, p_date, unit_cost)
)
data.table::setkey(pur_dt,  key_name, p_date)
data.table::setkey(sdx2_dt, key_name, sd_date)

sd_sale_cost <- pur_dt[sdx2_dt, on = .(key_name, p_date = sd_date), roll = TRUE] %>%
  tibble::as_tibble() %>%
  dplyr::mutate(
    segment_lbl = toupper(trimws(as.character(segment_lbl))),
    segment_lbl = factor(segment_lbl, levels = SEG_LEVELS)   # ⬅️ 항상 4개 레벨 고정
  ) %>%
  dplyr::filter(!is.na(unit_cost), is.finite(sd_price), sd_price > 0,
                is.finite(sd_qty), sd_qty > 0)

seg_cat_margin <- sd_sale_cost %>%
  dplyr::left_join(product_list %>% dplyr::select(key_name, category), by = "key_name") %>%
  dplyr::filter(!is.na(category)) %>%
  dplyr::mutate(margin_line = 1 - (unit_cost / sd_price)) %>%
  dplyr::group_by(segment_lbl, category) %>%
  dplyr::summarise(
    Items = dplyr::n(),
    Quantity = sum(sd_qty, na.rm = TRUE),
    Sales = sum(sd_amt, na.rm = TRUE),
    `Average Margin %` = dplyr::if_else(Sales > 0,
                          sum(margin_line * sd_amt, na.rm = TRUE) / Sales, NA_real_),
    .groups = "drop"
  ) %>%
  # 모든 세그먼트를 강제로 행에 채워넣기 (데이터 없어도 NA 생성)
  tidyr::complete(category, segment_lbl = factor(SEG_LEVELS, levels = SEG_LEVELS)) %>%
  dplyr::arrange(category, segment_lbl)

seg_cat_margin_wide <- seg_cat_margin %>%
  dplyr::select(category, segment_lbl, `Average Margin %`) %>%
  dplyr::mutate(segment_lbl = factor(segment_lbl, levels = SEG_LEVELS)) %>%
  tidyr::pivot_wider(
    names_from  = segment_lbl,
    values_from = `Average Margin %`,
    names_expand = TRUE,
    values_fill = NA_real_
  ) %>%
  # 열 순서 강제: Category + 4세그먼트
  dplyr::select(category, dplyr::all_of(SEG_LEVELS)) %>%
  dplyr::arrange(category)

# 보기 좋은 제목으로 교체
names(seg_cat_margin_wide) <- c("Category","All Broom","Wholesaler","Retail","Restaurant")

# ✅ Category × Active/Inactive × Inventory
sum_cat_status_inv <- master %>%
  mutate(
    status_simple = if_else(status == "Inactive", "Inactive", "Active")
  ) %>%
  count(category, status_simple, inventory_status, name = "Items") %>%
  mutate(col = paste(status_simple, inventory_status, sep = " - ")) %>%
  select(-status_simple, -inventory_status) %>%
  tidyr::pivot_wider(names_from = col, values_from = Items, values_fill = 0) %>%
  mutate(Total = rowSums(dplyr::across(where(is.numeric), ~ .x))) %>%
  arrange(category)

names(sum_cat_status_inv)[1] <- "Category"
names(sum_cat_status_inv) <- stringr::str_to_title(names(sum_cat_status_inv))
```

```{r product margin by customer}
# Data Used: Bizzup_Customer Order Guide.csv
# Used Columns (after cleaning): customer, item_code, sales_description, rate
if (nrow(og_raw) == 0) {
  customer_margins <- tibble::tibble()
} else {
  og <- og_raw %>% janitor::clean_names()
  need <- c("customer","item_code","sales_description","rate")
  miss <- setdiff(need, names(og)); if (length(miss)>0) stop("Order Guide missing cols: ", paste(miss, collapse=", "))

  customer_margins <- og %>%
    dplyr::transmute(
      customer,
      item_code_full = item_code,
      description_og = sales_description,
      rate           = parse_num(rate),
      cat_og         = toupper(stringr::str_extract(item_code_full, "^[^:>]+")),
      key_name       = norm_key(item_code_full)
    ) %>%
    dplyr::filter(!cat_og %in% EXCLUDE_CATS) %>%
    dplyr::filter(!has_banned_kw(description_og)) %>%
    dplyr::filter(!stringr::str_detect(item_code_full, stringr::regex("\\(deleted\\)", ignore_case = TRUE))) %>%
    dplyr::left_join(
      master %>% dplyr::transmute(
        key_name = norm_key(item_fullname),
        product_avg_margin = margin_pct,
        product_cost       = current_cost,
        description_master = description
      ),
      by = "key_name"
    ) %>%
    dplyr::mutate(
      margin_row = dplyr::case_when(
        !is.na(rate) & rate > 0 & !is.na(product_cost) ~ 1 - (product_cost / rate),
        TRUE ~ NA_real_
      ),
      margin_status_vs_avg = dplyr::case_when(
        is.na(margin_row) | is.na(product_avg_margin) ~ NA_character_,
        margin_row < (product_avg_margin - tolerance_band) ~ "Low",
        margin_row > (product_avg_margin + tolerance_band) ~ "High",
        TRUE ~ "Average"
      ),
      margin_status_vs_target = dplyr::case_when(
        is.na(margin_row) ~ NA_character_,
        margin_row < (target_margin - tolerance_band) ~ "Low",
        margin_row > (target_margin + tolerance_band) ~ "High",
        TRUE ~ "Average"
      ),
      description = dplyr::coalesce(description_og, description_master)
    ) %>%
    dplyr::select(customer, item_code_full, description, rate,
                  product_cost, margin_row, product_avg_margin,
                  margin_status_vs_avg, margin_status_vs_target)
}

method_rows <- tibble::tibble(
  Item = c(
    "Target Margin", "Tolerance Band", "Status Rules",
    "Exclude Categories", "Exclude Description Keyword",
    "Retail Price Basis", "Average Margin (Master)",
    "Average Margin (Seg×Cat)", "Outlier Method"
  ),
  Details = c(
    paste0(round(target_margin*100,1), "%"),
    paste0("±", round(tolerance_band*100,1), "%"),
    "Active - Full: last sold ≤ 180d; Active - Semi: last purchase ≤ 365d; else Inactive",
    paste(EXCLUDE_CATS, collapse=", "),
    "'안씀' 포함 시 제외",
    "최근 90일 RETAIL+RESTAURANT 가격(이상치 제거 후)의 매출가중 평균",
    "현재 원가 vs 현재 평균 판매가로 계산",
    "판매시점 원가(구매단가 롤링조인) vs 실판매가, 매출가중 평균",
    paste0(toupper(outlier_method), " (k=", outlier_k_mad,
           ", discount≥", round(outlier_min_discount*100), "%, min lines=", outlier_min_lines, ")")
  )
)

# (옵션) Outlier 로그
outlier_log <- sdx2 %>%
  dplyr::filter(is_outlier) %>%
  dplyr::transmute(
    key_name, sd_date, segment_lbl, sd_price,
    med, mad, rob_z,
    Rule = dplyr::case_when(
      is_low_mad & is_low_ratio ~ "MAD & Ratio",
      is_low_mad                ~ "MAD only",
      is_low_ratio              ~ "Ratio only"
    )
  )
```


```{r Export}
wb <- openxlsx::createWorkbook()
openxlsx::modifyBaseFont(wb, fontName = "Calibri", fontSize = 11)
st_title  <- openxlsx::createStyle(fontSize = 16, textDecoration = "bold", halign = "left")
st_header <- openxlsx::createStyle(textDecoration = "bold", halign = "center", border = "Bottom")
st_num    <- openxlsx::createStyle(numFmt = "#,##0.00")
st_int    <- openxlsx::createStyle(numFmt = "#,##0")
st_pct    <- openxlsx::createStyle(numFmt = "0.0%")

# === Summary ===
openxlsx::addWorksheet(wb, "Summary", gridLines = FALSE)
openxlsx::writeData(wb, "Summary",
  paste0("Summary (", format(Sys.Date(), "%Y-%m-%d"),
         ")  |  Target=", round(target_margin*100), "% ±", round(tolerance_band*100), "%"),
  startRow = 1, startCol = 1
)
openxlsx::addStyle(wb, "Summary", st_title, rows = 1, cols = 1)
r <- 3

openxlsx::writeData(wb, "Summary", "Status Distribution", startRow = r, startCol = 1, headerStyle = st_header)
openxlsx::writeData(wb, "Summary", sum_status, startRow = r+1, startCol = 1, headerStyle = st_header)
r <- r + nrow(sum_status) + 4

openxlsx::writeData(wb, "Summary", "Items By Segment × Status", startRow = r, startCol = 1, headerStyle = st_header)
openxlsx::writeData(wb, "Summary", sum_seg, startRow = r+1, startCol = 1, headerStyle = st_header)
r <- r + nrow(sum_seg) + 4

openxlsx::writeData(wb, "Summary", "Items By Category × Status", startRow = r, startCol = 1, headerStyle = st_header)
openxlsx::writeData(wb, "Summary", sum_cat, startRow = r+1, startCol = 1, headerStyle = st_header)
r <- r + nrow(sum_cat) + 4

# Items by Category × Active/Inactive × Inventory
openxlsx::writeData(wb, "Summary",
  "Items by Category × Active/Inactive × Inventory",
  startRow = r, startCol = 1
)
openxlsx::writeData(wb, "Summary",
  sum_cat_status_inv, startRow = r + 1, startCol = 1,
  headerStyle = st_header
)
openxlsx::setColWidths(wb, "Summary",
  cols = 1:ncol(sum_cat_status_inv), widths = "auto"
)

r <- r + nrow(sum_cat_status_inv) + 4

openxlsx::writeData(wb, "Summary", "Margin Status Distribution", startRow = r, startCol = 1, headerStyle = st_header)
openxlsx::writeData(wb, "Summary", sum_margin_status, startRow = r+1, startCol = 1, headerStyle = st_header)
r <- r + nrow(sum_margin_status) + 4

openxlsx::writeData(wb, "Summary", "Average Margin % By Segment", startRow = r, startCol = 1, headerStyle = st_header)
seg_row <- r + 1
openxlsx::writeData(wb, "Summary", seg_margin, startRow = seg_row, startCol = 1, headerStyle = st_header)
pct_cols_seg <- which(names(seg_margin) %in% c("Average Margin %","Sales-Weighted Margin % (YTD)"))
if (nrow(seg_margin) > 0 && length(pct_cols_seg)) {
  openxlsx::addStyle(wb, "Summary", st_pct,
    rows = (seg_row + 1):(seg_row + nrow(seg_margin)),
    cols = pct_cols_seg, gridExpand = TRUE
  )
}
r <- seg_row + nrow(seg_margin) + 3

openxlsx::writeData(wb, "Summary", "Average Margin % By Category", startRow = r, startCol = 1, headerStyle = st_header)
cat_row <- r + 1
openxlsx::writeData(wb, "Summary", cat_margin, startRow = cat_row, startCol = 1, headerStyle = st_header)
pct_cols_cat <- which(names(cat_margin) %in% c("Average Margin %","Sales-Weighted Margin % (YTD)"))
if (nrow(cat_margin) > 0 && length(pct_cols_cat)) {
  openxlsx::addStyle(wb, "Summary", st_pct,
    rows = (cat_row + 1):(cat_row + nrow(cat_margin)),
    cols = pct_cols_cat, gridExpand = TRUE
  )
}
r <- cat_row + nrow(cat_margin) + 3

openxlsx::writeData(wb, "Summary", "Avg Margin % By Segment × Category (Cost-At-Sale, Sales-Weighted)", startRow = r, startCol = 1, headerStyle = st_header)
sc_row <- r + 1
openxlsx::writeData(wb, "Summary", seg_cat_margin_wide, startRow = sc_row, startCol = 1, headerStyle = st_header, withFilter = FALSE)
# 세그먼트 4열 퍼센트 서식
segcat_pct_cols <- match(c("All Broom","Wholesaler","Retail","Restaurant"),
                         names(seg_cat_margin_wide))
segcat_pct_cols <- segcat_pct_cols[!is.na(segcat_pct_cols)]

if (nrow(seg_cat_margin_wide) > 0 && length(segcat_pct_cols)) {
  openxlsx::addStyle(wb, "Summary", st_pct,
    rows = (sc_row + 1):(sc_row + nrow(seg_cat_margin_wide)),
    cols = segcat_pct_cols, gridExpand = TRUE
  )
}
openxlsx::setColWidths(wb, "Summary", cols = 1:max(1, ncol(seg_cat_margin_wide)), widths = "auto")

# === Master ===
master_out <- master %>% dplyr::rename(
  Category = category, Code = code, Description = description, Status = status, Segment = segment,
  `Avg Sales Price` = current_sales_price, `Avg Margin %` = margin_pct, `Target Price` = target_price,
  `YTD Qty` = ytd_qty, `YTD Amount` = ytd_amount, `QOH` = qty_on_hand,
  `180d Qty` = qty_180d, `365d Qty` = qty_365d
)
openxlsx::addWorksheet(wb, "Master", gridLines = FALSE)
openxlsx::writeData(wb, "Master", paste0("Product Master (", format(Sys.Date(), "%Y-%m-%d"), ")"),
                    startRow = 1, startCol = 1)
openxlsx::addStyle(wb, "Master", st_title, rows = 1, cols = 1)
openxlsx::writeData(wb, "Master", master_out, startRow = 3, withFilter = TRUE, headerStyle = st_header)
openxlsx::freezePane(wb, "Master", firstRow = TRUE, firstActiveRow = 4)
openxlsx::setColWidths(wb, "Master", cols = 1:ncol(master_out), widths = "auto")
m_names <- names(master_out)
if (any(m_names %in% c("Avg Sales Price","Target Price","YTD Amount"))) openxlsx::addStyle(
  wb,"Master", st_num, rows = 4:(nrow(master_out)+3),
  cols = which(m_names %in% c("Avg Sales Price","Target Price","YTD Amount")), gridExpand = TRUE
)
if (any(m_names %in% c("Avg Margin %"))) openxlsx::addStyle(
  wb,"Master", st_pct, rows = 4:(nrow(master_out)+3),
  cols = which(m_names %in% c("Avg Margin %")), gridExpand = TRUE
)
if (any(m_names %in% c("YTD Qty","QOH","180d Qty","365d Qty"))) openxlsx::addStyle(
  wb,"Master", st_int, rows = 4:(nrow(master_out)+3),
  cols = which(m_names %in% c("YTD Qty","QOH","180d Qty","365d Qty")), gridExpand = TRUE
)

# === CustomerMargins (optional) ===
openxlsx::addWorksheet(wb, "CustomerMargins", gridLines = FALSE)
openxlsx::writeData(wb, "CustomerMargins", "Per-Customer Margin Vs Product Average", startRow = 1, startCol = 1)
openxlsx::addStyle(wb, "CustomerMargins", st_title, rows = 1, cols = 1)
openxlsx::writeData(wb, "CustomerMargins", customer_margins, startRow = 3, startCol = 1, withFilter = TRUE, headerStyle = st_header)
openxlsx::setColWidths(wb, "CustomerMargins", cols = 1:max(1, ncol(customer_margins)), widths = "auto")
cm_names <- names(customer_margins)
if (length(cm_names)>0 && any(cm_names %in% c("rate","product_cost"))) openxlsx::addStyle(
  wb,"CustomerMargins", st_num, rows = 4:(nrow(customer_margins)+3),
  cols = which(cm_names %in% c("rate","product_cost")), gridExpand = TRUE
)
if (length(cm_names)>0 && any(cm_names %in% c("margin_row","product_avg_margin"))) openxlsx::addStyle(
  wb,"CustomerMargins", st_pct, rows = 4:(nrow(customer_margins)+3),
  cols = which(cm_names %in% c("margin_row","product_avg_margin")), gridExpand = TRUE
)

# === Methodology ===
openxlsx::addWorksheet(wb, "Methodology", gridLines = FALSE)
openxlsx::writeData(wb, "Methodology", "How We Calculate Things", startRow = 1, startCol = 1)
openxlsx::addStyle(wb, "Methodology", st_title, rows = 1, cols = 1)
openxlsx::writeData(wb, "Methodology", method_rows, startRow = 3, startCol = 1, headerStyle = st_header)
openxlsx::setColWidths(wb, "Methodology", cols = 1:ncol(method_rows), widths = "auto")

# === OutlierLog (optional) ===
if (nrow(outlier_log) > 0) {
  openxlsx::addWorksheet(wb, "OutlierLog", gridLines = FALSE)
  openxlsx::writeData(wb, "OutlierLog", outlier_log, startRow = 1, startCol = 1, withFilter = TRUE, headerStyle = st_header)
  openxlsx::setColWidths(wb, "OutlierLog", cols = 1:ncol(outlier_log), widths = "auto")
}

# 저장
out_path <- paste0("Product_Master_Summary_", format(Sys.Date(), "%Y%m%d"), ".xlsx")
openxlsx::saveWorkbook(wb, out_path, overwrite = TRUE)
message("Done: ", normalizePath(out_path))
```

